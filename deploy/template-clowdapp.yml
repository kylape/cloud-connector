apiVersion: v1
kind: Template
metadata:
  name: cloud-connector
objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: cloud-connector-api
  spec:
    envName: ${ENV_NAME}
    database:
      name: cloud-connector
    kafkaTopics:
    - topicName: platform.inventory.host-ingress-p1
      replicas: 3
    deployments:
    - name: cloud-connector-api
      replicas: ${{REPLICAS_API}}
      podSpec:
        command:
        - ./cloud-connector
        - mqtt_connection_handler
        - -l
        - :8080
        env:
        - name: CLOUD_CONNECTOR_LOG_LEVEL
          value: ${{LOG_LEVEL}}
        - name: CLOUD_CONNECTOR_LOG_FORMAT
          value: logstash
        - name: CLOUD_CONNECTOR_MQTT_BROKER_ADDRESS
          value: ${{MQTT_BROKER_ADDRESS}}
        - name: CLOUD_CONNECTOR_MQTT_BROKER_JWT_GENERATOR_IMPL
          value: jwt_rsa_generator
        - name: CLOUD_CONNECTOR_JWT_PRIVATE_KEY_FILE
          value: /tmp/jwt_keys/jwt_signing_key.pem
        - name: CLOUD_CONNECTOR_MQTT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: mqtt.user
              name: cloud-connector-mqtt-credentials
        - name: CLOUD_CONNECTOR_SERVICE_TO_SERVICE_CREDENTIALS
          valueFrom:
            secretKeyRef:
              key: connector-psk-map
              name: cloud-connector-psks
        - name: CLOUD_CONNECTOR_CLIENT_ID_TO_ACCOUNT_ID_IMPL
          value: bop
        - name: CLOUD_CONNECTOR_AUTH_GATEWAY_URL
          value: ${{AUTH_GATEWAY_URL}}
        - name: CLOUD_CONNECTOR_CONNECTED_CLIENT_RECORDER_IMPL
          value: inventory
        - name: CLOUD_CONNECTOR_SOURCES_RECORDER_IMPL
          value: sources
        - name: CLOUD_CONNECTOR_MQTT_TOPIC_PREFIX
          value: ${{MQTT_TOPIC_PREFIX}}
        - name: CLOUD_CONNECTOR_SLEEP_TIME_HACK
          value: "0"
        image: quay.io/cloudservices/cloud-connector:${IMAGE_TAG}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
          requests:
            cpu: 250m
            memory: 256Mi
        initContainers:
        - args:
          - ./migrate_db
          - upgrade
          inheritEnv: true
        volumeMounts:
        - mountPath: /tmp/jwt_keys
          name: volume-mqtt-jwt-keys
          readOnly: true
        - mountPath: /tmp/rds-certs
          name: volume-rds-certs
          readOnly: true
        volumes:
        - name: volume-mqtt-jwt-keys
          secret:
            defaultMode: 420
            secretName: cloud-connector-mqtt-credentials
        - name: volume-rds-certs
          secret:
            defaultMode: 420
            secretName: rds-client-ca
parameters:
- name: IMAGE_TAG
  required: true
- name: LOG_LEVEL
  value: DEBUG
- name: CPU_LIMIT
  value: 500m
- name: MEMORY_LIMIT
  value: 512Mi
- name: REPLICAS_API
  value: "1"
- name: DB_VOLUME_CAPACITY
  value: 5Gi
- name: MQTT_BROKER_ADDRESS
  required: true
  value: wss://connect.cloud.stage.redhat.com:443
- name: MQTT_TOPIC_PREFIX
  required: true
  value: redhat
- name: AUTH_GATEWAY_URL
  required: true
  value: "http://apicast.3scale-staging.svc.cluster.local:8890/internal/certauth"
